# Set these as Variables in the Gitlab project
# export AWS_ACCESS_KEY_ID (special ci-cd IAM user with cluster access)
# export AWS_SECRET_ACCESS_KEY

image: org_name/eks-deploy  # deploy Dockerfile.eks-deploy to Docker Hub

services:
  - docker:18-dind

stages:
  - install
  - test
  - build
  - retrieve
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  AWS_ACCOUNT_ID: account_id
  CLUSTER_NAME: cluster_name
  VM_ID: app_name
  REGION: us-east-1

before_script:
  - export VERSION=$(echo $CI_COMMIT_SHA | cut -c1-8)

cache:
  paths:
    - node_modules/

install_dependencies:
  image: node:12.9.1-alpine
  stage: install
  script:
    - yarn install
  artifacts:
    paths:
      - node_modules/

run_tests:
  image: node:12.9.1-alpine
  stage: test
  script:
    - yarn test
  dependencies:
    - install_dependencies

build_and_push_image:
  stage: build
  script:
    - export IMAGE_TAG_STATUS=$(aws ecr list-images --repository-name ${VM_ID} | jq '.imageIds | .[] | select (.imageTag=="'${VERSION}'")')
    - >
      if [ "$IMAGE_TAG_STATUS" = "" ];
      then
        docker build -t ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${VM_ID}:${VERSION} . &&
        `aws ecr get-login --region ${REGION} --no-include-email` &&
        docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${VM_ID}:${VERSION};
      fi
  dependencies:
    - install_dependencies
  only:
    refs:
      - master

get_secrets:
  image:
    name: mesosphere/aws-cli
    entrypoint: ["/bin/sh", "-c"]
  stage: retrieve
  script:
    - mkdir secrets
    - aws s3api get-object --bucket ${VM_ID}-deploy --key deployment-secret.yaml secrets/deployment-secret.yaml
  artifacts:
    paths:
      - secrets/
  only:
    refs:
      - master

deploy_image_to_k8s_cluster:
  stage: deploy
  script:
    - eksctl utils write-kubeconfig --cluster ${CLUSTER_NAME} --region ${REGION}
    - export CLUSTER_ENDPOINT=$(aws eks describe-cluster --name ${CLUSTER_NAME} --region ${REGION} --output text --query 'cluster.endpoint')
    - export CERTIFICATE_AUTHORITY_DATA=$(aws eks describe-cluster --name ${CLUSTER_NAME} --region ${REGION} --output text --query 'cluster.certificateAuthority.data')
    - cat k8s/kubeconfig-cicd.yaml | envsubst > k8s/kubeconfig-cicd.final.yaml
    - export KUBECONFIG=./k8s/kubeconfig-cicd.final.yaml
    - kubectl apply -f secrets/deployment-secret.yaml  # ENVs for deployment
    - cat k8s/deployment.yaml | envsubst | kubectl apply -f -
  dependencies:
    - build_and_push_image
    - get_secrets
  only:
    refs:
      - master
